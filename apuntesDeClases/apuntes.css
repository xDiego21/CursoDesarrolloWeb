                    /* VINCULAR ARCHIVO CSS CON HTML */
/* <link rel="stylesheet" href="../ ruta del archivo css"> */
/* css lee el codigo en forma de cascada, de arriba a abajo dando prioridad hacia abajo */
/* CSS acepta paletas de colores personalizadas colorhunt.co */


                    /* FORMAS DE DAR ESTILO A NUESTRO HTML */
/* Selectores de Etiquetas, Clases y Especificidad */

                    /* SELECTOR DE ETIQUETAS */

p{ /* Etiqueta */
    color: red; /* propiedad: valor */
    /* propiedad para cambiar color */
    text-align: center; /* alinea en texto dependiendo el valor seleccionado */
    text-decoration: underline; /* añade decoracion al texto, ej subrayado */
    font-style: bold; /* cambia el estilo de letra */
    font-family: 'Times New Roman', Times, serif; /* cambia el tipo de letra */ /* fonts.google.com para mas tipos de letra */
    font-size: larger; /* cambia el tamaño de letra */
    text-shadow: red; /* agrega sombreado al texto */ /*cssgenerator.org/text-shadow-css-generator.html */
}
header{ /* Etiqueta */
    background-color: red; /* propiedad para cambiar color de fondo */
}
li{
    list-style: none; /* por defecto los Items de Listas vienen con una decoracion, ya sea un punto o numero. Con esta propiedad se lo quitamos o modificamos */
}

                    /* SELECTOR DE CLASES */

/* Con la propiedad class="selectorClase", denntro de la apertura de una etiqueta en mi html le definimos una clase para luego llamarla en mi css */
.selectorClase{ /* Clase */ 
    color: blue;
    background-color: blue;
    /* color de texto y fondo solo a esta clase especifica */
    /* el selector de clase tendra mayor jerarquia que la Etiqueta */ 
}

                    /* SELECTOR DE ESPECIFICIDAD */

header p{ /* Especificidad */
    color: yellow; /* el selector de Especificidad trabaja sobre la etiqueta hijo selecciona dentro del padre, en este casa todos los parrafos dentro del header tendran color amarillo */
}
header a{ /* a las Etiquetas de links(a) solo se les puede aplicar estilos usando Selector de especificidad o asignandole un clase */
    color: yellow;
    text-decoration: none;
}

                    /* HERENCIA DE ESTILOS PADRE E HIJO */
/* Las Etiquetas hijo heredan el estilo asignado a la Etiqueta padre */
/* Las Etiquetas de link(a) no heredan estilos, se les debe llamar por Clase o Especificidad */

main{
    color: red; /*todos los textos dentro del main seran de color rojo */
}

                    /* ALTURA, ANCHO Y UNIDADES DE MEDIDA */
/* height(altura), width(ancho), pixel(px) unidad de medida absoluta y porcentaje(%) unidad de medida que se adapta al ancho de la etiqueta padre */

header{
    height: 100px; /* altura en pixel absoluta */
    height: 10%; /* altura en porcentaje adaptativa */
    width: 100px; /* ancho en pixel */
    width: 10%; /* ancho en porcentaje */
}
img{
    width: 50px; /* para las imagenes es recomendable trabajar una sola medida */
}
main{
    /* developer.mozilla.org/en-US sitio web util */
    background-image: url(./ ruta de la imagen); /* propiedad para cargar una imagen de FONDO */
    background-position: top; /* posiciona la img en alguna parte del fondo, en este ej, en top, podemos % y px */
    background-repeat: repeat; /* esta propiedad sirve para img pequeñas que se repiten dentro del bloque de la etiqueta */
    background-size: cover; /* define el tamaño de la img dentro del fondo del bloque */
}

/*------------------------FIN DE LA CLASE 2--------------------------*/

                    /* BOX MODEL */
/* Modelos de caja, las Etiquetas representan cajas, cada una de estas etiquetas contenedoras pueden tener mas etiquetas contenedoras dentro */

<ul> /* ul Caja contenedora */
    <li>LINK</li> /* Dentro otras cajas contenedoras */
    <li class="ejemploBox">LINK</li>
    <li>LINK</li> /* la Etiqueta (li) es una de bloque que abarca todo el ancho disponible por naturaleza */
    <li>LINK</li>
</ul>;

.ejemploBox{
    border: solid 3px red; /* borde al contenido, se muestra entre el contenido(padding) y el margen(margin) */
    background-image: url(./boxModel/tiposDeBorder.gif);
    border-radius: ; /* sirve para redondear las esquinas de los elementos HTML */
    padding: 10px; /* espacio interno entre el "border" y el contenido */ /* utilizando un solo valor nos genera un estacion en todos sus lados */
    padding-bottom: 10px; /* genera espacio unicamente sobre el lado inferior */
    padding: 20px 10px 20px 10px; /* de esta forma trabajamos sobre sus cuatro lados sin la necesidad de escribir la propiedad de todos sus lados, estos valores modifican los lados en sentido horario, top rigth bottom left */
    padding: 20px 10px; /* de esta forma trabajamos los lados justos, top/bottom left/rigth */
    margin: 10px; /* es el espacio externo entre el "border" de una caja y sus aledañas */
    margin-bottom: 10px;
    margin: 20px 10px 20px 10px;
    margin: 20px 10px;
    background-image: url(./boxModel/tiposDeMargenes.png);
}
/* Existe un margen blanco que genera html por defecto, debe ir al inicio del css, para quitarlo : */
*{ /* (*) selector universal, afecta a todas las etiquetas y clases */
    margin: 0;
    padding: 0;
    box-sizing: border-box; /* respeta el ancho y el alto de la caja */
}
                    /* POSITION */
/* Define como se posiciona un elemento en la pagina, top - left - rigth - bottom */ /* top/bottom/left/rigth no afectan si no el elemento no tiene position */

.ejemploBox{
    position: absolute; /* se posiciona al elemento mas cercano con "position" */ 
    position: relative; /* se mueve relativo a su posicion normal */
    position: fixed; /* se mantiene fijo en la pantalla cuando haces "scroll */
    position: static; /* por defecto, no acepta top, left */
    position: sticky; /* combina relative y fixed. Se queda pegado cuando haces scroll */
    z-index: ; /* controla la profundidad de un elemento superpuesto, cuanto mayor sea el Valor(numero) de la propiedad mas al frente estara el elemento visualmente */
}

                    /* ETIQUETAS DE BLOQUE Y DE LINEA */
<li>/* es una Etiqueta de Bloque, estas abarcan todo el ancho disponible por naturaleza */
<img>;/* esta es una Etiqueta de Linea, abarca solo el espacio de su contenido, estas Etiquetas de Linea se pueden colocar una al lado de otra */

                    /* FLEXBOX */
/* La propiedad Flex Box nos permite jugar con filas o columnas, se aplica el la Etiqueta Padre y lo heredan sus Hijos, no sus nietos */

.padreFlex{
    display: flex; /* activa el modelo de caja FlexBox */
    flex-direction: column; /* apila elementos uno arriba de otro, en columna eje vertical */
    flex-direction: row; /* uno al lado de otro, en una fila eje horizontal */
    /* si no declaramos una direccion toma por defecto "row" */
    flex-direction: row-reverse; /* invierte su orden y los coloca del lado contrario de la caja, en una fila */
    flex-direction: column-reverse; /* invierte su orden y los coloda del lado contrario de la caja, en una columna */
    justify-content: space-between; /* posiciona a los Hijos en el espacio HORIZONTAL disponible del eje que decretemos en la propiedad "flex-direction" ya sea fila o columna */ /* se mueve en el eje HORIZONTAL ya sea de fila o columna */
    background-image: url(./flexBox/valoresDeFlexDirection.jpg);
    align-items: center; /* posiciona a los Hijos en el espacio VERTICAL disponible del eje que decretemos en la propiedad "flex-direction" ya sea fila o columna */ /* se mueve en el eje VERTICAL ya sea de fila o columna */
    
    flex-direction: row; /* determina que la direccion del contenido(hijos) es Horizontal en fila */
    justify-content: ; /* se mueve por el eje(fila) en direccion HORIZONTAL */ /* en sintonia con flex-direccion */
    align-items: ; /* se mueve por el eje(fila) en direccion VERTICAL */ /* en direccion secundario */
    background-image: url(./flexBox/align-justify-content.webp);

    flex-direction: column; /* determina que la direccion del contenido(hijos) es Vertical en un columna */
    justify-content: ; /* se mueve por el eje(fila) en direccion VERTICAL */
    align-items: ; /* se mueve por el eje(fila) en direccion HORIZONTAL */

    flex-wrap: ;
    background-image: url(./flexBox/flex-wrap.png);
    align-content: ; /* solo funciona con "flex-warp" */

    background-image: url(./flexBox/alignItems-column.png) url(./flexBox/alignItems-row.png);
}

/*------------------------FIN DE LA CLASE 3--------------------------*/

                    /* GRID */
/* La propiedad Grid nos permite distribuir elementos tanto en filas como columnas, se aplica el la Etiqueta Padre y lo heredan sus Hijos, no sus nietos */
/* A Grid no le interesa como esta organizado el codigo, le interesa como lo organizamos con las propiedades de Grid */
/* No se usa Grid para diseñar el header o footer, se recomienda Flex */

.padreGrid img{ /* necesario para que tamaño de las imagenes respeten las medidas que definimos mas abajo con columns y rows */
    height: 100%;
    width: 100%;
}
.padreGrid{
    display: grid; /* activa el modelo de caja Grid */
    grid-template-areas: 
    "titulo titulo titulo"
    "img1 texto1 texto1"
    "img1 img2 img2"
    "texto2 img3 texto3"; /* nombra y organiza visualmente las areas de un grid, genera filas y columnas */
    grid-template-columns: 25% 40% 25%;/* 1fr 2fr 1fr; 25px 40px 25px; /* define el tamaño(ancho) y la cantidad de columnas, no se recomienda usar de valor pixel */
    grid-template-rows: 100px 150px repeat(2, 300px); /* define el tamaño(alto) y la cantidad de filas */
    gap: 5px; /* espacio entre filas y columnas */
    column-gap: 5px; /* espacio entre columnas */
    row-gap: 5px; /* espacio entre flias */
    justify-content: center; /* centra toda la grilla */
    justify-items: center; /* horizontalmente centra el contenido de la grilla */
    align-items: center; /* verticalmente centra el contenido de la grilla */
    place-items: center; /* combina ambas */
}
.tituloGrid{
    grid-area: titulo; /* sirve para declarar que area de la grilla queremos que ocupe */
/* grid-(column/row) controlan cuantas filas o columnas ocupa un elemento */
    grid-column: 1 / 3; /* desde la columna 1 hasta la 3(ocupa 2) */
    grid-row: 1 / 2; /* desde la fila 1 hasta la fila 2(ocupa 1) */
}
.img1{
    grid-area: img1;
}
.texto1{
    grid-area: texto1;
}

                    /* MEDIA QUERIES */
/* Transforma el contenido en Responsive, lo que lo adapta a dispositivos ya sea tablets o celulares */
/* Requiere la siguiente Etiqueta con sos propiedades y valores dentro de nuestro "head" de HTML */
/* <meta name="viewport" content="width=device-width, initial-scale=1.0"> */

body{
    background-image: url(./mediaQuery/dimensionesResponsive.jpg);
}
/* "only screen" es para impresiones, se puede poner solo "@media" */

    /* Celulares */
/*Regla*/  /*Medio*/   /*Tarea*/
@media only screen and (max-width: 480px) {
    
}
    /* Tablets */
@media only screen and (min-width: 481px) and (max-width: 978px) {
    
}
    /* Escritorio */
@media only screen and (min-width: 979px) {
    
}

@media (max-width: 480px) {
    .padreGrid{
        grid-template-areas:  
    "titulo"
    "texto1"
    "img1"
    "texto2"
    "img2"
    "texto3"
    "img3";
        grid-template-columns: 1fr;
        grid-template-rows: 80px repeat(6, 50px) ;
        row-gap: 5px;
    }
}

/*------------------------FIN DE LA CLASE 4--------------------------*/

                    /* PSEUDOCLASES */

/* Las pseudoclases en CSS son palabras clave que se añaden a los selectores para especificar un estado especial del elemento seleccionado. Son útiles para definir estilos en diferentes estados de los elementos sin necesidad de JavaScript. */

/* :hover: Se aplica cuando el usuario pasa el cursor sobre un elemento. */
/* :focus: Se aplica cuando un elemento, como un campo de formulario, recibe el foco. */
/* :active: Permite activar estilos cuando un elemento esta activado, por ejemplo, al hacer presion sobre un boton */
/* :nth-child(n): Selecciona y aplica estilo al elemento n-ésimo de su tipo dentro de su padre. */
/* :first-child y :last-child: Seleccionan y aplica estilos al primer y último hijo de un elemento padre. */

button:hover { /*cambia el color de fondo de un boton al pasar el cursor sobre el */
    background-color: blue;
    color: brown;
}

                    /* BOOTSTRAP */

/* Web oficial : getbootstrap.com */

/* CSS Bootstrap (en el head, arriba de nuestro "link" de css)
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous"> *//

/* Scripts Bootstrap (entre </footer> y </body>)
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script> */

/* Para agregarle una clase propia a las ya asignada por BOOTSTRAP, hay que escribirle el nombre al final */
/* <nav class="navbar navbar-expand-lg clase-propia"> (clase-propia seria el nombre que le asignamos y por le cual podemos llamarla en nuestro CSS)

                    /* GRILLAS */

main{
    background-image: url(./Bootstrap.pdf);
}

/*------------------------FIN DE LA CLASE 5--------------------------*/

                    /* GIT Y GITHUB */

/* Git es un manejador de versiones, "manejaremos varias versiones de nuestro mismo proyecto". Nuestro proyecto principal se va a llamar "main", es la rama principal del proyecto y las "ramas" o "Branch" son las ramificasiones y cada una de estas "ramas" o "branch" seran las distintas versiones de nuestro proyecto */
/* GitHub es una red social que nos permite alojar nuestro trabajo, es como si fuera un Drive colavorativo online */

/* Terminales(cmd, gitbush, powershell).*/
/* Comando "cd" para navegar a la carpeta solicitada, ejemplo, "C:\Users\diego_s76dohc>cd Documents" me va a situar en la carpeta Documents */

/* Pasos para configurar Git dentro de la terminal.
git --version (para verificar si git esta instalado, muestra una version)
git config --global user.name "Diego" (para configurar en toda la pc un nombre)
git config --global user.email " " (lo mismo pero para emails)
Dentro de la web de github creas nuevo repositorio
git init (inicializar)
git add README.md (Readme seria la descripcion que vos crees sobre tu perfil)
git status (para ver si hay archivos modificados y necesitan ser actualizados)
git add . (agrega o actualiza todos los cambios)
git commit -m "Modificaciones en main de Index"(agregamos una descripcion del cambio que se haya realizado) 
git branch -M main (le asignamos nombre a la rama)
git remote add origin
git push -u origin main (carga los archivos a la red online)
git pull (para bajar los cambios que se hicieron en el repositorio desde otra compu) */

/* Para crear pages en linea. /Settings/Pages */
body{
    background-image: url(./GIT--Paso-a-paso-.pdf);
}

/*------------------------FIN DE LA CLASE 6--------------------------*/

                    /* SASS */


/* Necesario instalar Node.js, para verificar si lo tenemos instalado, vamos a la terminal y escribimos, node -v */
/* Luego hay que instalar SASS desde la terminar, puede ser desde el visual, usamos el comando "npm install -g sass", para verificar si esta instalado, "sass --version" */
/* Una vez instalado SASS, creamos un archivo, "style.scss" */
/* Ahora empezamos a definir variables dentro del archivo .scss, utilizaremos "$" al principio del nombre, una vez creada podemos empezar a utilizarla */

    /* VARIABLE */
$rojo: red;
$font:'tipografia';
/* Las variables se crean con el signo '$' al inicio del nombre, estas son almacenamientos que guardan valores que luego podemos utilizar llamando solo a la variable por su nombre, se utiliza con valores que se repiten mucho en mi estilo de css */
$primary-color: blue;
body {
    background-color: $primary-color;
}
/* Esto nos sirve en caso de que necesitemos modificar algo y en vez de ir cambiando etiqueta por etiqueta, directamente modificamos la variable definida y automaticamente se modifican todas las etiquetas */
/* Para "compilar" el archivo .scss con .css, utilizaremos el siguiente codigo, "sass --watch style.scss style.css" */
/* El comando watch seguira trabajando mientras la consola no se cierre */

    /* FUNCION DE ANIDAMIENTO EN SASS */

/* En el archivo .scss escribimos la anidacion */
header {
    background-color: $primary-color;
    nav {
        padding: 20px;
        ul {
            list-style: circle;
            li {
                text-decoration: underline;
            }
        }
    }
}
/* Con el comando "watch" lo transcribimos al archivo .css y se mostrara asi.. */
header {
    background-color: blue;
}
header nav {
    padding: 20px;
}
header nav ul {
    list-style: circle;
}
header nav ul li {
    text-decoration: underline;
}
/* Esta es la sintaxis .SCSS con simbolos */
header
    background-color: blue
    nav
        padding: 20px
        ul
            list-style: circle
            li
                text-decoration: underline
/* Esta seria la sintaxis .SASS sin simbolos */

    /* MIXIN */
@mixin border-radius($radius) {
    border-radius: $radius;
} /* ($radius) queda como variable vacia al no definirle un valor lo que nos permitira añadirlo cuando la llamemos, de lo contrario si pusieramos un valor, al llamarla utilizaria ese valor */
@mixin flex {
    display: flex;
    flex-direction: row;
    justify-content: center;
}
.img{
    @include flex;
}
@maxin flex ($direction, $justify, $aling){
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $aling;
}
.box{
    @include flex (row, center, flex-start)
}
@mixin tamanio($alto, $ancho){
    height: $alto;
    width: $ancho;
}
img{
    @include tamanio(50px, 50%)
}
/* Añadir en los parentesis un parametro o variable vacio. En esta variable vamos a decidir que valor va a tener en el futuro. El futuro es cuando llamemos o utilicemos ese MIXIN. */
.box {
    @include border-radius(10px)
}
.mapa {
    @include border-radius(20px)
}
/* Se crea con @mixin y se incluye/se usa con @include */

    /* EXTEND */
/* @extend nos permite compartir un conjunto de reglas de estilo entre diferentes selectores */
.button {
    padding: 10px 20px;
    border-radius: 5px;
    color: white;
    background-color: blue;
}
/* @extend */ /* primary-button hereda las propiedades de button, y se pueden agregar o modificar otras */
.primary-button {
    @extend .button;
    background-color: blue;
}

    /* PARTIALS E IMPORT */
/* Con este metodo podemos crear varios archivos .scss o .sass dependiendo de que sintaxis utilizemos, y colocar dentro de cada archivo etiquetas o variables creadas, de forma mas ordenada, por ejemplo creamos un archivo que se llame _variables.scss, _header.scss y dentro escribimos todas las variables que hayamos creado y los codigos de estilo de header.
Luego con el import unificamos todos los archivos en uno */
/* Estas hojas de css se llaman "partials" y se diferencian con el _delante de su nombre */

@import "variable"; /* de esta forma importamos el archivo "_variable.scss" en nuestro archivo .css. | tambien es valido usar @use | */
@import "header";

/*------------------------FIN DE LA CLASE 7--------------------------*/

